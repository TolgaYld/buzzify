# import Post from "./post.graphql"
# import Story from "./story.graphql"
# import Comment from "./comment.graphql"
# import Report from "./report.graphql"
# import Channel from "./channel.graphql"

type Query {
    user(id: ID!): User!
    users: [User!]!
    userWithUsername(username: String!): User
    userWithEmail(email: String!): User
}

type User {
    _id: ID!
    email: String!
    username: String!
    posts: [Post]
    storys: [Story]
    comments: [Comment]
    reports: [Report]
    reporteds: [Report]
    channels: [Channel!]!
    coordinates: [Float!]!
    distance: Int!
    points: Int!
    official: Boolean!
    device_type: String
    device_id: String
    is_deleted: Boolean
    is_banned: Boolean
    is_admin: Boolean
    last_update_from_user: ID
}

type Mutation{
    signUpUser(data: SignUpUserInput!): AuthUser!
    signInUser(data: SignInUserInput!): AuthUser!
    updateUser(data: UpdateUserInput): AuthUser!
    updateUserPassword(data: updatePasswordInput!): AuthUser!
    deleteUser(id: ID!): User!
    deleteUserFromDb(id: ID! ): String!
}

input SignUpUserInput{
    username: String!
    email: String!
    password: String!
}

input UpdateUserInput{
    email: String
    username: String
    coordinates: [Float!]!
    distance: Int
    official: Boolean
    is_deleted: Boolean
    is_banned: Boolean
    email_confirmed: Boolean
    is_admin: Boolean
    last_update_from_user: ID,
}

input updatePasswordInput {
    password: String!
    repeat_password: String!
}

input SignInUserInput {
    signInEmailOrUsername: String
    password: String!
}

type AuthUser {
    user: User
    token: String!
    refreshToken: String!
}


type Subscription {
    user: User!
}