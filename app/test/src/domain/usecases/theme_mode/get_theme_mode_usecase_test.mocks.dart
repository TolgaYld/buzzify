// Mocks generated by Mockito 5.4.5 from annotations
// in buzzup/test/src/domain/usecases/theme_mode/get_theme_mode_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:buzzup/core/errors/failure.dart' as _i5;
import 'package:buzzup/core/utils/either.dart' as _i4;
import 'package:buzzup/src/domain/repositories/theme_mode/theme_mode.repo.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ThemeModeRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeModeRepo extends _i1.Mock implements _i2.ThemeModeRepo {
  MockThemeModeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>> getThemeMode() => (super.noSuchMethod(
        Invocation.method(
          #getThemeMode,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, bool>>.value(_i6.dummyValue<_i4.Either<_i5.Failure, bool>>(
          this,
          Invocation.method(
            #getThemeMode,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, bool>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, void>> setThemeMode({required bool? mode}) => (super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [],
          {#mode: mode},
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, void>>.value(_i6.dummyValue<_i4.Either<_i5.Failure, void>>(
          this,
          Invocation.method(
            #setThemeMode,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, void>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>> getUseSystemTheme() => (super.noSuchMethod(
        Invocation.method(
          #getUseSystemTheme,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, bool>>.value(_i6.dummyValue<_i4.Either<_i5.Failure, bool>>(
          this,
          Invocation.method(
            #getUseSystemTheme,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, bool>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, void>> setUseSystemTheme({required bool? useSystemTheme}) => (super.noSuchMethod(
        Invocation.method(
          #setUseSystemTheme,
          [],
          {#useSystemTheme: useSystemTheme},
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, void>>.value(_i6.dummyValue<_i4.Either<_i5.Failure, void>>(
          this,
          Invocation.method(
            #setUseSystemTheme,
            [],
            {#useSystemTheme: useSystemTheme},
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, void>>);
}
